name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:
    paths: [ "modules/**", "environments/**" ]

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.11.4
    # Configure your AWS credentials and region environment variables for use in other GitHub Actions.
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: us-east-1
          role-session-name: github-actions

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      working-directory: environments/dev
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Validates that all Terraform configuration files are valid
    - name: Terraform validate
      working-directory: environments/dev
      run: terraform validate

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      working-directory: environments/dev
      run: terraform plan -var-file=terraform.tfvars

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      working-directory: environments/dev
      run: terraform apply -auto-approve -var-file=terraform.tfvars
